import numpy as np

# Константы и параметры
N = 100  # Число узлов по пространству
L = 1.0  # Длина пластины
T0 = 300  # Начальная температура
Te = 400  # Температура на границе
lamda = 0.5  # Коэффициент теплопроводности
ro = 8000  # Плотность материала
c = 500  # Теплоемкость материала
kapa = 0.1  # Коэффициент теплообмена
Q_source = 10  # Мощность внутренних источников тепла

# Определение шагов
h = L / (N - 1)  # Шаг по пространству
tau = 0.01  # Шаг по времени
time = 0
t_end = 10  # Конечное время

# Массивы для температуры и прогоночных коэффициентов
T = np.full(N, T0)  # Начальное температурное поле
alfa = np.zeros(N)  # Прогоночные коэффициенты альфа
beta = np.zeros(N)  # Прогоночные коэффициенты бета

# Указание узлов с источниками тепла
N1 = N // 4
N2 = 2 * (N // 4)
N3 = 3 * (N // 4)

# Основной временной цикл
while time < t_end:
    time += tau

    # Задание начальных условий для прогоночных коэффициентов
    alfa[0] = 2.0 * tau * lamda / (lamda * h ** 2 + 2.0 * tau * (lamda + kapa * h))
    beta[0] = (lamda * h ** 2 * T[0] + 2.0 * tau * kapa * h * Te) / (lamda * h ** 2 + 2.0 * tau * (lamda + kapa * h))

    # Расчет прогоночных коэффициентов
    for i in range(1, N - 1):
        ai = lamda / h ** 2
        bi = 2.0 * lamda / h ** 2 + ro * c / tau
        ci = lamda / h ** 2
        fi = -ro * c * T[i] / tau

        # Добавляем эффект от внутренних источников тепла
        if i == N1 or i == N2:
            fi -= h * Q_source
        elif i == N3:
            fi -= h * Q_source * 1.5  # Модификация для узла N3

        # Вычисление коэффициентов прогоночной схемы
        alfa[i] = ai / (bi - ci * alfa[i - 1])
        beta[i] = (fi + ci * beta[i - 1]) / (bi - ci * alfa[i - 1])

    # Прямой ход для определения температурного распределения
    T[N - 1] = Te
    for i in range(N - 2, -1, -1):
        T[i] = alfa[i] * T[i + 1] + beta[i]

# Вывод полученных температур
print("Температурное распределение:", T)
